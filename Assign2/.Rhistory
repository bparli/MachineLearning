samp.wine=floor(nrow(neuralscaled)*0.75)
wine.train_ind <- sample(seq_len(nrow(neuralscaled)), size = samp.wine)
wine.train=neuralscaled[wine.train_ind,]
wine.test=neuralscaled[-wine.train_ind,]
wine.nn = nnet(quality~fixed.acidity+volatile.acidity+citric.acid+residual.sugar+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+alcohol, data=wine.train, size=12, decay=5e-4, maxit=1000)
wine.pred = predict(wine.nn,wine.train,type="class")
table(wine.pred,wine.train$quality)
wine.pred = predict(wine.nn,wine.test,type="class")
table(wine.pred,wine.test$quality)
plot(wine.nn)
install.packages("nnet")
1(7+16+410+315+94+14)/1199
1-(7+16+410+315+94+14)/1199
1-(124+84+16)/400
wine.nn = nnet(quality~fixed.acidity+volatile.acidity+citric.acid+residual.sugar+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+alcohol, data=wine.train, size=12, decay=5e-4, maxit=500)
wine.pred = predict(wine.nn,wine.train,type="class")
table(wine.pred,wine.train$quality)
1-(6+13+411+348+94+5)/1199
wine.pred = predict(wine.nn,wine.test,type="class")
table(wine.pred,wine.test$quality)
1-(124+84+16)/400
1-(1+119+108+11)/400
wine.nn = nnet(quality~fixed.acidity+volatile.acidity+citric.acid+residual.sugar+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+alcohol, data=wine.train, size=12, decay=5e-4, maxit=300)
wine.pred = predict(wine.nn,wine.train,type="class")
table(wine.pred,wine.train$quality)
1-(5+16+399+330+90+6)/1199
wine.pred = predict(wine.nn,wine.test,type="class")
table(wine.pred,wine.test$quality)
1-(119+102+16)/400
?nnet
wine.nn = nnet(quality~fixed.acidity+volatile.acidity+citric.acid+residual.sugar+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+alcohol, data=wine.train, size=12, decay=5e-4, maxit=750)
wine.pred = predict(wine.nn,wine.test,type="class")
table(wine.pred,wine.test$quality)
1-(1+118+92+14)/400
wine.pred = predict(wine.nn,wine.train,type="class")
table(wine.pred,wine.train$quality)
1-(6+23+405+316+87+14)/1199
library(C50)
cars = read.csv2(file="C:/Users/bparli/Downloads/cars.txt", header=TRUE, sep=",")
set.seed(1)
samp.cars=floor(nrow(cars)*0.75)
cars.train_ind <- sample(seq_len(nrow(cars)), size = samp.cars)
cars.train=cars[cars.train_ind,]
cars.test=cars[-cars.train_ind,]
cars.tree=C5.0(cars.train$class~.,data=cars.train)
cars.pred=predict(cars.tree, cars.train, type="class")
summary(cars.pred)
table(cars.pred, cars.train$class)
cars.pred=predict(cars.tree, cars.test, type="class")
summary(cars.pred)
table(cars.pred, cars.test$class)
cars.tree
summary(cars.tree)
library(adabag)
wine = read.csv2(file="C:/Users/bparli/Downloads/winequality-red.csv", header=TRUE)
wine$citric.acid=as.numeric(as.character(wine$citric.acid))
wine$fixed.acidity=as.numeric(as.character(wine$fixed.acidity))
wine$volatile.acidity=as.numeric(as.character(wine$volatile.acidity))
wine$residual.sugar=as.numeric(as.character(wine$residual.sugar))
wine$chlorides=as.numeric(as.character(wine$chlorides))
wine$free.sulfur.dioxide=as.numeric(as.character(wine$free.sulfur.dioxide))
wine$total.sulfur.dioxide=as.numeric(as.character(wine$total.sulfur.dioxide))
wine$density=as.numeric(as.character(wine$density))
wine$pH=as.numeric(as.character(wine$pH))
wine$sulphates=as.numeric(as.character(wine$sulphates))
wine$alcohol=as.numeric(as.character(wine$alcohol))
wine$quality = as.factor(wine$quality)
set.seed(1)
samp.wine=floor(nrow(wine)*0.75)
wine.train_ind <- sample(seq_len(nrow(wine)), size = samp.wine)
wine.train=wine[wine.train_ind,]
wine.test=wine[-wine.train_ind,]
wine.boost = boosting(quality~.,data=wine.train, mfinal=100, boos=TRUE)
wine.pred_train = predict(wine.boost, newdata=wine.train)
wine.pred_train$confusion
wine.pred_train$error
wine.pred = predict(wine.boost, newdata=wine.test)
wine.pred$confusion
wine.pred$error
summary(wine.boost)
wine.boost
library(nnet)
neuralwine = read.csv2(file="C:/Users/bparli/Downloads/winequality-red.csv", header=TRUE)
neuralwine$citric.acid=as.numeric(as.character(neuralwine$citric.acid))
neuralwine$fixed.acidity=as.numeric(as.character(neuralwine$fixed.acidity))
neuralwine$volatile.acidity=as.numeric(as.character(neuralwine$volatile.acidity))
neuralwine$residual.sugar=as.numeric(as.character(neuralwine$residual.sugar))
neuralwine$chlorides=as.numeric(as.character(neuralwine$chlorides))
neuralwine$free.sulfur.dioxide=as.numeric(as.character(neuralwine$free.sulfur.dioxide))
neuralwine$total.sulfur.dioxide=as.numeric(as.character(neuralwine$total.sulfur.dioxide))
neuralwine$density=as.numeric(as.character(neuralwine$density))
neuralwine$pH=as.numeric(as.character(neuralwine$pH))
neuralwine$sulphates=as.numeric(as.character(neuralwine$sulphates))
neuralwine$alcohol=as.numeric(as.character(neuralwine$alcohol))
neuralwine$quality=as.factor(neuralwine$quality)
mins = apply(neuralwine[,-12], 2, min)
maxs = apply(neuralwine[,-12], 2, max)
neuralscaled = as.data.frame(scale(neuralwine[,-12], center = mins, scale = maxs - mins))
neuralscaled = cbind(neuralscaled,quality=neuralwine$quality)
samp.wine=floor(nrow(neuralscaled)*0.75)
wine.train_ind <- sample(seq_len(nrow(neuralscaled)), size = samp.wine)
wine.train=neuralscaled[wine.train_ind,]
wine.test=neuralscaled[-wine.train_ind,]
wine.nn = nnet(quality~fixed.acidity+volatile.acidity+citric.acid+residual.sugar+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+alcohol, data=wine.train, size=12, decay=5e-4, maxit=500)
wine.pred = predict(wine.nn,wine.train,type="class")
table(wine.pred,wine.train$quality)
wine.pred = predict(wine.nn,wine.test,type="class")
table(wine.pred,wine.test$quality)
plot(wine.nn)
wine.nn
wine.nn$convergence
wine.nn$wts
=12*11
12*11
12*11*8
11*8
(11*8)+(12*11)
(12*8)+(12*11)
(12*6)+(12*11)
(13*6)+(12*12)
v
nncars = read.csv2(file="C:/Users/bparli/Downloads/cars.txt", header=TRUE, sep=",")
samp.cars=floor(nrow(nncars)*0.75)
cars.train_ind <- sample(seq_len(nrow(nncars)), size = samp.cars)
cars.train=nncars[cars.train_ind,]
cars.test=nncars[-cars.train_ind,]
cars.nn = nnet(class~buying+maint+doors+persons+lug_boot+safety, data=cars.train, size=5, type="class", maxit=200)
cars.pred = predict(cars.nn, cars.train[,-7],type="class")
table(cars.pred, cars.train$class)
cars.pred_test = predict(cars.nn, cars.test[,-7],type="class")
table(cars.pred_test, cars.test$class)
cars.nn
cars.nn$wts
plot.nnet(cars.nn)
=16*5
(16*5)+(6*4)
library(rpart)
data(iris)
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(iris))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- iris[test.idx, , drop=FALSE]
train <- iris[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Species"), train)
error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- exhaustive.search(names(iris)[-5], evaluator)
f <- as.simple.formula(subset, "Species")
print(f)
library(Fselector)
install.packages("FSelector")
library(rpart)
data(iris)
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(iris))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- iris[test.idx, , drop=FALSE]
train <- iris[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Species"), train)
error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- exhaustive.search(names(iris)[-5], evaluator)
f <- as.simple.formula(subset, "Species")
print(f)
library(exhaustive.search)
library(FSelector)
library(rpart)
data(iris)
evaluator <- function(subset) {
#k-fold cross validation
k <- 5
splits <- runif(nrow(iris))
results = sapply(1:k, function(i) {
test.idx <- (splits >= (i - 1) / k) & (splits < i / k)
train.idx <- !test.idx
test <- iris[test.idx, , drop=FALSE]
train <- iris[train.idx, , drop=FALSE]
tree <- rpart(as.simple.formula(subset, "Species"), train)
error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
})
print(subset)
print(mean(results))
return(mean(results))
}
subset <- exhaustive.search(names(iris)[-5], evaluator)
f <- as.simple.formula(subset, "Species")
print(f)
library(FSelector)
library(FSelector)
library(FSelector)
source('~/knapsack.R')
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/utils.R')
source('~/MachineLearning/Assign2/countones.R')
source('~/knapsack.R')
source('~/MachineLearning/Assign2/fourpeaks.R')
source('~/MachineLearning/Assign2/fourpeaks.R')
setwd("~/MachineLearning/Assign2")
source('~/MachineLearning/Assign2/fourpeaks.R')
source('~/knapsack.R')
source('~/knapsack.R')
source('~/MachineLearning/Assign2/knapsack.R')
source("knapsack.R")
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("Knapsack Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Max Value") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme_bw() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Max Value") +
ggtitle("Count Ones - Number of Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("Knapsack - Time Comparison") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
labs(xlab="Iterations", ylab="Time")
print(pl1, position = c(0, 0, 0.5, 1), more = TRUE)
print(pl2, position = c(0.5, 0, 1, 1), more = TRUE)
print(pl3, position = c(1, 0, 1.5, 1), more = TRUE)
source('~/MachineLearning/Assign2/countones.R')
head(final_set)
head(final_all)
length(final_set)
final_set
final_set[final_set$Description="results"]
final_set[final_set$Description="results",]
final_set[final_set$Description=="results",]
source('~/MachineLearning/Assign2/countones.R')
final_set[final_set$Description=="results",]
View(symlog_trans)
rm(symlog_trans())
rm(symlog_trans
rm(symlog_trans)
rm(symlog_trans)
rm(g_legend)
source('~/MachineLearning/Assign2/countones.R')
final_set[final_set$Description=="results",]
rm(takeNth)
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/fourpeaks.R')
source('~/MachineLearning/Assign2/knapsack.R')
onemax[onemax$Description == "results",]
final_set[final_set$Description=="results",]
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/fourpeaks.R')
source('~/MachineLearning/Assign2/knapsack.R')
source("countones.R")
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("CO Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
print(pl1, position = c(0, 0, 1, 1))
source("countones.R")
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results" && final_set$Algorithm=="RHC",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("CO Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
print(pl1, position = c(0, 0, 1, 1))
head(final_set)
final_set[final_set$Description=="results" && final_set$Algorithm=="RHC",]
final_set[final_set$Description=="results" & final_set$Algorithm=="RHC",]
pl1 = ggplot(final_set[final_set$Description=="results" & final_set$Algorithm=="RHC",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("CO Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
print(pl1, position = c(0, 0, 1, 1))
pl1 = ggplot(final_set[final_set$Description=="results" & final_set$Algorithm=="SA",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("CO Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
print(pl1, position = c(0, 0, 1, 1))
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("CO Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
print(pl1, position = c(0, 0, 1, 1))
head(final_set)
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("CO - Function Calls")
pl2
source("countones.R")
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("CO - Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("CO - Time") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
xlab("Iterations") +
ylab("Time")
pl3
pl2
v
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Function Calls") +
ggtitle("CO - Function Calls")
pl2
ggplot(final_set[final_set$Description=="calls" & final_set$Algorithm=="RHC",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Function Calls") +
ggtitle("CO - Function Calls")
ggplot(final_set[final_set$Description=="calls" & final_set$Algorithm=="SA",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Function Calls") +
ggtitle("CO - Function Calls")
pl2
pl3
pl2
pl2
pl3
pl2
pl3
final_set
final_set[order(Algorithm),]
final_set[order(final_set$Algorithm),]
pl2
pl3
source('~/MachineLearning/Assign2/knapsack.R')
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("KS Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("KS - Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("KS - Time") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
xlab("Runs") +
ylab("Time")
pl1
pl2
pl3
pl1
pl2
pl2
pl3
pl1
pl3
pl2
final_set[order(final_set$Algorithm),]
pl1
pl2
pl3
source("knapsack.R")
library(ggplot2)
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("KS - Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("KS - Time") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
xlab("Runs") +
ylab("Time")
source("fourpeaks.R")
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("4P Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("4P - Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("4P - Time") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
xlab("Runs") +
ylab("Time")
pl1
pl2
pl3
source('~/MachineLearning/Assign2/fourpeaks.R')
pl1
pl2
pl3
source('~/MachineLearning/Assign2/fourpeaks.R')
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/countones.R')
source('~/MachineLearning/Assign2/fourpeaks.R')
source("fourpeaks.R")
library(ggplot2)
pl1 = ggplot(final_set[final_set$Description=="results",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
ggtitle("4P Performance") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
theme(legend.position="bottom") + labs(ylab="Best Performance", xlab="Problem Size")
pl2 <- ggplot(final_set[final_set$Description=="calls",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm)) +
scale_y_continuous() +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown")) +
xlab("Problem Size") +
ylab("Result") +
ggtitle("4P - Function Calls")
pl3 =  ggplot(final_set[final_set$Description=="time",], aes(x=Run, y=Value, group=Algorithm)) +
geom_line(aes(colour=Algorithm))+
scale_y_continuous(trans=log2_trans()) +
ggtitle("4P - Time") +
theme(axis.title=element_text(face="bold.italic", color="brown"), title=element_text(face="bold", color="brown"))+
xlab("Runs") +
ylab("Time")
pl1
pl2
pl3
pl1
pl2
pl3
pl3
pl2
pl3
pl1
